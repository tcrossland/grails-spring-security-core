With this approach you use the @Requestmap@ domain class to store mapping entries in the database. @Requestmap@ has a @url@ property that contains the secured URL pattern and a @configAttribute@ property containing a comma-delimited list of required roles and/or tokens such as @IS_AUTHENTICATED_FULLY@, @IS_AUTHENTICATED_REMEMBERED@, and @IS_AUTHENTICATED_ANONYMOUSLY@.

To use @Requestmap@ entries, specify @securityConfigType="Requestmap"@:

{code}
grails.plugin.springsecurity.securityConfigType = "Requestmap"
{code}

You create @Requestmap@ entries as you create entries in any Grails domain class:

{code}
for (String url in [
      '/', '/index', '/index.gsp', '/**/favicon.ico',
      '/assets/**', '/**/js/**', '/**/css/**', '/**/images/**',
      '/login', '/login.*', '/login/*',
      '/logout', '/logout.*', '/logout/*']) {
   new Requestmap(url: url, configAttribute: 'permitAll').save()
}

new Requestmap(url: '/profile/**',    configAttribute: 'ROLE_USER').save()
new Requestmap(url: '/admin/**',      configAttribute: 'ROLE_ADMIN').save()
new Requestmap(url: '/admin/role/**', configAttribute: 'ROLE_SUPERVISOR').save()
new Requestmap(url: '/admin/user/**', configAttribute: 'ROLE_ADMIN,ROLE_SUPERVISOR').save()
new Requestmap(url: '/j_spring_security_switch_user',
               configAttribute: 'ROLE_SWITCH_USER,isFullyAuthenticated()').save()
{code}

The @configAttribute@ value can have a single value or have multiple comma-delimited values. In this example only users with @ROLE_ADMIN@ or @ROLE_SUPERVISOR@ can access @/admin/user/\*\*@ urls, and only users with @ROLE_SWITCH_USER@ can access the switch-user url (@/j_spring_security_switch_user@) and in addition must be authenticated fully, i.e. not using a remember-me cookie. Note that when specifying multiple roles, the user must have at least one of them, but when combining @IS_AUTHENTICATED_FULLY@, @IS_AUTHENTICATED_REMEMBERED@, or @IS_AUTHENTICATED_ANONYMOUSLY@ (or their corresponding SpEL expressions) with one or more roles means the user must have one of the roles and satisty the @IS_AUTHENTICATED@ rule.

Unlike the [Config.groovy Map approach|guide:configGroovyMap], you do not need to revise the @Requestmap@ entry order because the plugin calculates the most specific rule that applies to the current request.

h4. Requestmap Cache

@Requestmap@ entries are cached for performance, but caching affects runtime configurability. If you create, edit, or delete an instance, the cache must be flushed and repopulated to be consistent with the database. You can call @springSecurityService.clearCachedRequestmaps()@ to do this. For example, if you create a @RequestmapController@ the @save@ action should look like this (and the update and delete actions should similarly call @clearCachedRequestmaps()@):

{code}
class RequestmapController {

   def springSecurityService

   ...

   def save() {
      def requestmapInstance = new Requestmap(params)
      if (!requestmapInstance.save(flush: true)) {
         render view: 'create', model: [requestmapInstance: requestmapInstance]
         return
      }

      springSecurityService.clearCachedRequestmaps()

      flash.message = "${message(code: 'default.created.message', args: [message(code: 'requestmap.label', default: 'Requestmap'), requestmapInstance.id])}"
      redirect action: 'show', id: requestmapInstance.id
   }
}
{code}
