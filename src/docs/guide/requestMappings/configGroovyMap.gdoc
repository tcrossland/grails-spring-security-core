To use the @Config.groovy@ Map to secure URLs, first specify @securityConfigType="InterceptUrlMap"@:

{code}
grails.plugin.springsecurity.securityConfigType = "InterceptUrlMap"
{code}

Define a Map in @Config.groovy@:

{code}
grails.plugin.springsecurity.interceptUrlMap = [
   '/':                ['permitAll'],
   '/index':           ['permitAll'],
   '/index.gsp':       ['permitAll'],
   '/assets/**':       ['permitAll'],
   '/**/js/**':        ['permitAll'],
   '/**/css/**':       ['permitAll'],
   '/**/images/**':    ['permitAll'],
   '/**/favicon.ico':  ['permitAll'],
   '/login/**':        ['permitAll'],
   '/logout/**':       ['permitAll'],
   '/secure/**':       ['ROLE_ADMIN'],
   '/finance/**':      ['ROLE_FINANCE', 'isFullyAuthenticated()'],
]
{code}

When using this approach, make sure that you order the rules correctly. The first applicable rule is used, so for example if you have a controller that has one set of rules but an action that has stricter access rules, e.g.

{code}
'/secure/**':              ['ROLE_ADMIN', 'ROLE_SUPERUSER'],
'/secure/reallysecure/**': ['ROLE_SUPERUSER']
{code}

then this would fail - it wouldn't restrict access to @/secure/reallysecure/list@ to a user with @ROLE_SUPERUSER@ since the first URL pattern matches, so the second would be ignored. The correct mapping would be

{code}
'/secure/reallysecure/**': ['ROLE_SUPERUSER']
'/secure/**':              ['ROLE_ADMIN', 'ROLE_SUPERUSER'],
{code}
