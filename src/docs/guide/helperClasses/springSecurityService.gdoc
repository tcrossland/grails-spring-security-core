@grails.plugin.springsecurity.SpringSecurityService@ provides security utility functions. It is a regular Grails service, so you use dependency injection to inject it into a controller, service, taglib, and so on:

{code}
def springSecurityService
{code}

h4. getCurrentUser()
Retrieves a domain class instance for the currently authenticated user. During authentication a user/person domain class instance is retrieved to get the user's password, roles, etc. and the id of the instance is saved. This method uses the id and the domain class to re-load the instance, or the username if the @UserDetails@ instance is not a @GrailsUser@.

If you do not need domain class data other than the id, you should use the @loadCurrentUser@ method instead.

Example:

{code}
class SomeController {

   def springSecurityService

   def someAction() {
      def user = springSecurityService.currentUser
      ...
   }
}
{code}

h4. loadCurrentUser()
Often it is not necessary to retrieve the entire domain class instance, for example when using it in a query where only the id is needed as a foreign key. This method uses the GORM @load@ method to create a proxy instance. This will never be null, but can be invalid if the id doesn't correspond to a row in the database, although this is very unlikely in this scenario because the instance would have been there during authentication.

If you need other data than just the id, use the @getCurrentUser@ method instead.

Example:

{code}
class SomeController {

   def springSecurityService

   def someAction() {
      def user = springSecurityService.isLoggedIn() ?
         springSecurityService.loadCurrentUser() :
         null
      if (user) {
         CreditCard card = CreditCard.findByIdAndUser(
            params.id as Long, user)
         ...
      }
      ...
   }
}
{code}

h4. isLoggedIn()
Checks whether there is a currently logged-in user.

Example:

{code}
class SomeController {

   def springSecurityService

   def someAction() {
      if (springSecurityService.isLoggedIn()) {
         ...
      }
      else {
         ...
      }
   }
}
{code}

h4. getAuthentication()

Retrieves the current user's [Authentication|https://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/core/Authentication.html]. If authenticated, this will typically be a [UsernamePasswordAuthenticationToken|https://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/authentication/UsernamePasswordAuthenticationToken.html].

If not authenticated and the [AnonymousAuthenticationFilter|https://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/web/authentication/AnonymousAuthenticationFilter.html] is active (true by default) then the anonymous user's authentication will be returned. This will be an instance of @grails.plugin.springsecurity.authentication. GrailsAnonymousAuthenticationToken@ with a standard @org.springframework.security.core.userdetails.User@ instance as its Principal. The authentication will have a single granted role, @ROLE_ANONYMOUS@.

Example:

{code}
class SomeController {

   def springSecurityService

   def someAction() {
      def auth = springSecurityService.authentication
      String username = auth.username
      // a Collection of GrantedAuthority
      def authorities = auth.authorities
      boolean authenticated = auth.authenticated
      ...
   }
}
{code}

h4. getPrincipal()

Retrieves the currently logged in user's @Principal@. If authenticated, the principal will be a @grails.plugin.springsecurity.userdetails.GrailsUser@, unless you have created a custom @UserDetailsService@, in which case it will be whatever implementation of [UserDetails|https://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/core/userdetails/UserDetails.html] you use there.

If not authenticated and the [AnonymousAuthenticationFilter|https://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/web/authentication/AnonymousAuthenticationFilter.html] is active (true by default) then a standard @org.springframework.security.core.userdetails.User@ is used.

Example:

{code}
class SomeController {

   def springSecurityService

   def someAction() {
      def principal = springSecurityService.principal
      String username = principal.username
      // a Collection of GrantedAuthority
      def authorities = principal.authorities
      boolean enabled = principal.enabled
      ...
   }
}
{code}

h4. encodePassword()
Hashes a password with the configured hashing scheme. By default the plugin uses bcrypt, but you can configure the scheme with the @grails.plugin.springsecurity.password.algorithm@ attribute in @Config.groovy@. The supported values are 'bcrypt' to use bcrypt, 'pbkdf2' to use [PBKDF2|https://en.wikipedia.org/wiki/PBKDF2], or any message digest algorithm that is supported in your JDK; see [this Java page|https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html] for the available algorithms.
{warning}
You are *strongly* discouraged from using MD5 or SHA-1 algorithms because of their well-known vulnerabilities. You should also use a salt for your passwords, which greatly increases the computational complexity of computing passwords if your database gets compromised. See [Salted Passwords|guide:salt].
{warning}

Example:

{code}
class PersonController {

   def springSecurityService

   def updateAction() {
      def person = Person.get(params.id)

      params.salt = person.salt
      if (person.password != params.password) {
         params.password = springSecurityService.encodePassword(
            password, salt)
         def salt = ... // e.g. randomly generated using a utility method
         params.salt = salt
      }
      person.properties = params
      if (!person.save(flush: true)) {
         render view: 'edit', model: [person: person]
         return
      }
      redirect action: 'show', id: person.id
   }
}
{code}

{note}
If you are hashing the password in the User domain class (using @beforeInsert@ and @encodePassword@) then don't call @springSecurityService.encodePassword()@ in your controller since you'll double-hash the password and users won't be able to log in. It's best to encapsulate the password handling logic in the domain class.
{note}

h4. updateRole()
Updates a role and, if you use @Requestmap@ instances to secure URLs, updates the role name in all affected @Requestmap@ definitions if the name was changed.

Example:

{code}
class RoleController {

   def springSecurityService

   def update() {
      def roleInstance = Role.get(params.id)
      if (!springSecurityService.updateRole(roleInstance, params)) {
         render view: 'edit', model: [roleInstance: roleInstance]
         return
      }

      flash.message = "The role was updated"
      redirect action: show, id: roleInstance.id
   }
}
{code}

h4. deleteRole()
Deletes a role and, if you use @Requestmap@ instances to secure URLs, removes the role from all affected @Requestmap@ definitions. If a @Requestmap@'s config attribute is only the role name (for example, "/foo/bar/\*\*=ROLE_FOO"), it is deleted.

Example:

{code}
class RoleController {

   def springSecurityService

   def delete() {
      def roleInstance = Role.get(params.id)
      try {
         springSecurityService.deleteRole (roleInstance
         flash.message = "The role was deleted"
         redirect action: list
      }
      catch (DataIntegrityViolationException e) {
         flash.message = "Unable to delete the role"
         redirect action: show, id: params.id
      }
   }
}
{code}

h4. clearCachedRequestmaps()
Flushes the Requestmaps cache and triggers a complete reload. If you use @Requestmap@ instances to secure URLs, the plugin loads and caches all @Requestmap@ instances as a performance optimization. This action saves database activity because the requestmaps are checked for each request. Do not allow the cache to become stale. When you create, edit or delete a @Requestmap@, flush the cache. Both @updateRole()@ and @deleteRole()@ call clearCachedRequestmaps()for you. Call this method when you create a new @Requestmap@ or do other @Requestmap@ work that affects the cache.

Example:

{code}
class RequestmapController {

   def springSecurityService

   def save() {
      def requestmapInstance = new Requestmap(params)
      if (!requestmapInstance.save(flush: true)) {
         render view: 'create',
                model: [requestmapInstance: requestmapInstance]
         return
      }

      springSecurityService.clearCachedRequestmaps()
      flash.message = "Requestmap created"
      redirect action: show, id: requestmapInstance.id
   }
}
{code}

h4. reauthenticate()
Rebuilds an [Authentication|https://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/core/Authentication.html] for the given username and registers it in the security context. You typically use this method after updating a user's authorities or other data that is cached in the @Authentication@ or @Principal@. It also removes the user from the user cache to force a refresh at next login.

Example:

{code}
class UserController {

   def springSecurityService

   def update() {
      def userInstance = User.get(params.id)

      params.salt = person.salt
      if (params.password) {
         params.password = springSecurityService.encodePassword(
            params.password, salt)
         def salt = ... // e.g. randomly generated using a utility method
         params.salt = salt
      }
      userInstance.properties = params
      if (!userInstance.save(flush: true)) {
         render view: 'edit', model: [userInstance: userInstance]
         return
      }

      if (springSecurityService.loggedIn &&
             springSecurityService.principal.username ==
                userInstance.username) {
         springSecurityService.reauthenticate userInstance.username
      }

      flash.message = "The user was updated"
      redirect action: show, id: userInstance.id
   }
}
{code}
