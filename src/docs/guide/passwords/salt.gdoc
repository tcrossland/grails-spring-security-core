The Spring Security plugin uses hashed passwords and a digest algorithm that you specify. For enhanced protection against dictionary attacks, you should use a salt in addition to digest hashing.

{note}
Note that if you use bcrypt (the default setting) or pbkdf2, do not configure a salt (e.g. the @dao.reflectionSaltSourceProperty@ property or a custom @saltSource@ bean) because these algorithms use their own internally.
{note}

There are two approaches to using salted passwords in the plugin - defining a field in the @UserDetails@ class to access by reflection, or by directly implementing [SaltSource|https://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/authentication/dao/SaltSource.html] yourself.

h4. dao.reflectionSaltSourceProperty
Set the @dao.reflectionSaltSourceProperty@ configuration property:

{code}
grails.plugin.springsecurity.dao.reflectionSaltSourceProperty = 'username'
{code}

This property belongs to the @UserDetails@ class. By default it is an instance of @grails.plugin.springsecurity.userdetails.GrailsUser@, which extends the standard Spring Security [User class|https://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/core/userdetails/User.html] and not your 'person' domain class. This limits the available fields unless you use a [custom @UserDetailsService@|guide:userDetailsService].

As long as the username does not change, this approach works well for the salt. If you choose a property that the user can change, the user cannot log in again after changing it unless you re-hash the password with the new value. So it's best to use a property that doesn't change.

Another option is to generate a random salt when creating users and store this in the database by adding a new field to the 'person' class. This approach requires a custom @UserDetailsService@ because you need a custom @UserDetails@ implementation that also has a 'salt' property, but this is more flexible and works in cases where users can change their username.

h4. SystemWideSaltSource and Custom SaltSource

Spring Security supplies a simple @SaltSource@ implementation, [SystemWideSaltSource|https://docs.spring.io/spring-security/site/docs/3.2.x/apidocs/org/springframework/security/authentication/dao/SystemWideSaltSource.html], which uses the same salt for each user. It's less robust than using a different value for each user but still better than no salt at all.

An example override of the salt source bean using SystemWideSaltSource would look like this:

{code}
import org.springframework.security.authentication.dao.SystemWideSaltSource
beans = {
   saltSource(SystemWideSaltSource) {
      systemWideSalt = 'the_salt_value'
   }
}
{code}

To have full control over the process, you can implement the @SaltSource@ interface and replace the plugin's implementation with your own by defining a bean in @grails-app/conf/spring/resources.groovy@ with the name @saltSource@:

{code}
beans = {
   saltSource(com.foo.bar.MySaltSource) {
      // set properties
   }
}
{code}

h4. Hashing Passwords
Regardless of the implementation, you need to be aware of what value to use for a salt when creating or updating users, for example, in a @UserController@'s @save@ or @update@ action. When hashing the password, you use the two-parameter version of @springSecurityService.encodePassword()@:

{code}
class UserController {

   def springSecurityService

   def save() {
      def userInstance = new User(params)
      userInstance.password = springSecurityService.encodePassword(
                    params.password, userInstance.username)
      if (!userInstance.save(flush: true)) {
         render view: 'create', model: [userInstance: userInstance]
         return
      }

      flash.message = "The user was created"
      redirect action: show, id: userInstance.id
   }

   def update() {
      def userInstance = User.get(params.id)

      if (params.password) {
         params.password = springSecurityService.encodePassword(
                    params.password, userInstance.username)
      }
      userInstance.properties = params
      if (!userInstance.save(flush: true)) {
         render view: 'edit', model: [userInstance: userInstance]
         return
      }

      if (springSecurityService.loggedIn &&
               springSecurityService.principal.username ==
                  userInstance.username) {
         springSecurityService.reauthenticate userInstance.username
      }

      flash.message = "The user was updated"
      redirect action: show, id: userInstance.id
   }
}
{code}

{note}
If you are encoding the password in the User domain class (using @beforeInsert@ and @encodePassword@) then don't call @springSecurityService.encodePassword()@ in your controller since you'll double-hash the password and users won't be able to log in. It's best to encapsulate the password handling logic in the domain class. In newer versions of the plugin (version 1.2 and higher) code is auto-generated in the user class so you'll need to adjust that password hashing for your salt approach.
{note}
