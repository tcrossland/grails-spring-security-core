The typical approach to mapping the relationship between 'person' and 'authority' is a many-to-many. Users have multiple roles, and roles are shared by multiple users. This approach can be problematic in Grails, because a popular role, for example, @ROLE_USER@, will be granted to many users in your application. GORM uses collections to manage adding and removing related instances and maps many-to-many relationships bidirectionally. Granting a role to a user requires loading all existing users who have that role because the collection is a @Set@. So even though no uniqueness concerns may exist, Hibernate loads them all to enforce uniqueness. The recommended approach in the plugin is to map a domain class to the join table that manages the many-to-many, and using that to grant and revoke roles to users.

Like the other domain classes, this class is generated for you, so you don't need to deal with the details of mapping it. Assuming you choose @com.mycompany.myapp@ as your package, and @User@ and @Role@ as your class names, you'll generate this class:

{code}
package com.mycompany.myapp

import grails.gorm.DetachedCriteria
import groovy.transform.ToString

import org.apache.commons.lang.builder.HashCodeBuilder

@ToString(cache=true, includeNames=true, includePackage=false)
class UserRole implements Serializable {

   private static final long serialVersionUID = 1

   User user
   Role role

   UserRole(User u, Role r) {
      this()
      user = u
      role = r
   }

   @Override
   boolean equals(other) {
      if (!(other instanceof UserRole)) {
         return false
      }

      other.user?.id == user?.id &&
      other.role?.id == role?.id
   }

   @Override
   int hashCode() {
      def builder = new HashCodeBuilder()
      if (user) builder.append(user.id)
      if (role) builder.append(role.id)
      builder.toHashCode()
   }

   static UserRole get(long userId, long roleId) {
      criteriaFor(userId, roleId).get()
   }

   static boolean exists(long userId, long roleId) {
      criteriaFor(userId, roleId).count()
   }

   private static DetachedCriteria criteriaFor(long userId, long roleId) {
      UserRole.where {
         user == User.load(userId) &&
         role == Role.load(roleId)
      }
   }

   static UserRole create(User user, Role role, boolean flush = false) {
      def instance = new UserRole(user: user, role: role)
      instance.save(flush: flush, insert: true)
      instance
   }

   static boolean remove(User u, Role r, boolean flush = false) {
      if (u == null || r == null) return false

      int rowCount = UserRole.where { user == u && role == r }.deleteAll()

      if (flush) { UserRole.withSession { it.flush() } }

      rowCount
   }

   static void removeAll(User u, boolean flush = false) {
      if (u == null) return

      UserRole.where { user == u }.deleteAll()

      if (flush) { UserRole.withSession { it.flush() } }
   }

   static void removeAll(Role r, boolean flush = false) {
      if (r == null) return

      UserRole.where { role == r }.deleteAll()

      if (flush) { UserRole.withSession { it.flush() } }
   }

   static constraints = {
      role validator: { Role r, UserRole ur ->
         if (ur.user == null || ur.user.id == null) return
         boolean existing = false
         UserRole.withNewSession {
            existing = UserRole.exists(ur.user.id, r.id)
         }
         if (existing) {
            return 'userRole.exists'
         }
      }
   }

   static mapping = {
      id composite: ['user', 'role']
      version false
   }
}
{code}

The helper methods make it easy to grant or revoke roles. Assuming you have already loaded a user and a role, you grant the role to the user as follows:

{code}
User user = ...
Role role = ...
UserRole.create user, role
{code}

Or by using the 3-parameter version to trigger a flush:

{code}
User user = ...
Role role = ...
UserRole.create user, role, true
{code}

Revoking a role is similar:

{code}
User user = ...
Role role = ...
UserRole.remove user, role
{code}

Or:

{code}
User user = ...
Role role = ...
UserRole.remove user, role, true
{code}

The class name is the only configurable attribute:

{table}
*Property* | *Default Value* | *Meaning*
userLookup.authorityJoinClassName | 'PersonAuthority' | User/Role many-many join class name
{table}
